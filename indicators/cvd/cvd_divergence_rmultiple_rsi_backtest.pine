//@version=6
//This indicator is quite strict + strong Signal but due to ALMOST 0 Signal we ignore it
indicator("CVD Divergences R-Multiple Backtest (RSI)", overlay=true)

// Define SMA Periods
cvd_sma_length = 50
cvd_momentum_length = 20

// Risk-Reward Parameters
risk_multiple = input.float(1.0, "Risk Multiple (%)", minval=0.1, step=0.1)
reward_multiple = input.float(2.0, "Reward Multiple (%)", minval=0.1, step=0.1)
max_bars = input.int(20, "Maximum Bars to Hold", minval=1)

// RSI Parameters
rsi_length = input.int(14, "RSI Length", minval=1)
rsi_oversold = input.int(30, "RSI Oversold Level", minval=0, maxval=100)
rsi_overbought = input.int(70, "RSI Overbought Level", minval=0, maxval=100)

// Compute CVD using cumulative volume delta method
cvd = ta.cum(volume * (close - open))  
cvd_sma = ta.sma(cvd, cvd_sma_length)

// Compute momentum of CVD and price
cvd_diff = cvd - ta.sma(cvd, cvd_momentum_length)
price_diff = close - ta.sma(close, cvd_momentum_length)

// RSI Calculation
rsi = ta.rsi(close, rsi_length)
is_oversold = rsi <= rsi_oversold
is_overbought = rsi >= rsi_overbought

// Identify Divergences with RSI Confirmation
bullish_divergence = cvd_diff > 0 and price_diff < 0 and is_oversold  // Must be oversold for bullish
bearish_divergence = cvd_diff < 0 and price_diff > 0 and is_overbought  // Must be overbought for bearish

// Performance Tracking
var int bullish_total = 0
var int bullish_success = 0
var int bullish_failed = 0
var int bearish_total = 0
var int bearish_success = 0
var int bearish_failed = 0
var int timeout_count = 0

// Trade Tracking
var float entry_price = na
var string current_trade = na
var int bars_since_signal = 0

// Function to check R-multiple targets
check_targets(trade_type, entry_price, current_high, current_low) =>
    if trade_type == "Bullish"
        profit_target = entry_price * (1 + reward_multiple/100)
        stop_loss = entry_price * (1 - risk_multiple/100)
        if current_high >= profit_target
            1  // Success - Hit 2R
        else if current_low <= stop_loss
            -1 // Failed - Hit Stop Loss
        else
            0  // Pending
    else
        profit_target = entry_price * (1 - reward_multiple/100)
        stop_loss = entry_price * (1 + risk_multiple/100)
        if current_low <= profit_target
            1  // Success - Hit 2R
        else if current_high >= stop_loss
            -1 // Failed - Hit Stop Loss
        else
            0  // Pending

// Track new signals
if bullish_divergence and na(current_trade)
    bullish_total := bullish_total + 1
    entry_price := close
    current_trade := "Bullish"
    bars_since_signal := 0

if bearish_divergence and na(current_trade)
    bearish_total := bearish_total + 1
    entry_price := close
    current_trade := "Bearish"
    bars_since_signal := 0

// Update existing trade status
if not na(current_trade)
    bars_since_signal := bars_since_signal + 1
    result = check_targets(current_trade, entry_price, high, low)
    
    if result != 0 or bars_since_signal > max_bars
        if current_trade == "Bullish"
            if result == 1
                bullish_success := bullish_success + 1
            else if result == -1
                bullish_failed := bullish_failed + 1
            else
                timeout_count := timeout_count + 1
        else
            if result == 1
                bearish_success := bearish_success + 1
            else if result == -1
                bearish_failed := bearish_failed + 1
            else
                timeout_count := timeout_count + 1
        // Reset trade tracking
        current_trade := na
        entry_price := na

// Calculate success rates
bullish_rate = bullish_total > 0 ? (bullish_success / bullish_total) * 100 : 0
bearish_rate = bearish_total > 0 ? (bearish_success / bearish_total) * 100 : 0
overall_rate = (bullish_total + bearish_total) > 0 ? ((bullish_success + bearish_success) / (bullish_total + bearish_total)) * 100 : 0

// Plot signals with R-multiple targets
plotshape(series=bullish_divergence and na(current_trade[1]), title="Bullish", location=location.belowbar, color=color.green, style=shape.triangleup, size=size.small)
plotshape(series=bearish_divergence and na(current_trade[1]), title="Bearish", location=location.abovebar, color=color.red, style=shape.triangledown, size=size.small)

// Plot RSI levels
hline(rsi_overbought, "Overbought Level", color=color.new(color.red, 70))
hline(rsi_oversold, "Oversold Level", color=color.new(color.green, 70))

// Display Stats Table
var table stats = table.new(position.top_right, 7, 5, border_width=1)
if barstate.islast
    table.cell(stats, 0, 0, "Signal Type", bgcolor=color.gray)
    table.cell(stats, 1, 0, "Total", bgcolor=color.gray)
    table.cell(stats, 2, 0, "2R Hits", bgcolor=color.gray)
    table.cell(stats, 3, 0, "Stopped", bgcolor=color.gray)
    table.cell(stats, 4, 0, "Timeout", bgcolor=color.gray)
    table.cell(stats, 5, 0, "Win Rate", bgcolor=color.gray)
    table.cell(stats, 6, 0, "R-Mult", bgcolor=color.gray)
    
    // Bullish Stats
    table.cell(stats, 0, 1, "Bullish", bgcolor=color.green)
    table.cell(stats, 1, 1, str.tostring(bullish_total))
    table.cell(stats, 2, 1, str.tostring(bullish_success))
    table.cell(stats, 3, 1, str.tostring(bullish_failed))
    table.cell(stats, 4, 1, str.tostring(bullish_total - bullish_success - bullish_failed))
    table.cell(stats, 5, 1, str.tostring(math.round(bullish_rate, 2)) + "%")
    bull_rmult = bullish_total > 0 ? (bullish_success * reward_multiple - bullish_failed * risk_multiple) / bullish_total : 0
    table.cell(stats, 6, 1, str.tostring(math.round(bull_rmult, 2)))
    
    // Bearish Stats
    table.cell(stats, 0, 2, "Bearish", bgcolor=color.red)
    table.cell(stats, 1, 2, str.tostring(bearish_total))
    table.cell(stats, 2, 2, str.tostring(bearish_success))
    table.cell(stats, 3, 2, str.tostring(bearish_failed))
    table.cell(stats, 4, 2, str.tostring(bearish_total - bearish_success - bearish_failed))
    table.cell(stats, 5, 2, str.tostring(math.round(bearish_rate, 2)) + "%")
    bear_rmult = bearish_total > 0 ? (bearish_success * reward_multiple - bearish_failed * risk_multiple) / bearish_total : 0
    table.cell(stats, 6, 2, str.tostring(math.round(bear_rmult, 2)))
    
    // Overall Stats
    table.cell(stats, 0, 3, "Overall", bgcolor=color.blue)
    table.cell(stats, 1, 3, str.tostring(bullish_total + bearish_total))
    table.cell(stats, 2, 3, str.tostring(bullish_success + bearish_success))
    table.cell(stats, 3, 3, str.tostring(bullish_failed + bearish_failed))
    table.cell(stats, 4, 3, str.tostring(timeout_count))
    table.cell(stats, 5, 3, str.tostring(math.round(overall_rate, 2)) + "%")
    total_rmult = (bullish_total + bearish_total) > 0 ? (bull_rmult * bullish_total + bear_rmult * bearish_total) / (bullish_total + bearish_total) : 0
    table.cell(stats, 6, 3, str.tostring(math.round(total_rmult, 2)))

// Display Settings
var label settings_label = na
label.delete(settings_label)
settings_label := label.new(
    x=bar_index, 
    y=high + (high * 0.02),
    text="Risk: " + str.tostring(risk_multiple) + "% | Reward: " + str.tostring(reward_multiple) + "%\n" +
         "Max Bars: " + str.tostring(max_bars) + "\n" +
         "RSI(" + str.tostring(rsi_length) + "): " + str.tostring(rsi_oversold) + "/" + str.tostring(rsi_overbought) + "\n" +
         "Success = Hit " + str.tostring(reward_multiple/risk_multiple) + "R before 1R loss",
    color=color.new(color.blue, 80)) 