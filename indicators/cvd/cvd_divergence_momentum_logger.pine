//@version=6
indicator("CVD Divergences with Momentum Strength - Logger", overlay=true)

// Define SMA Periods
cvd_sma_length = 50
cvd_momentum_length = 20
price_momentum_length = 20

// Compute CVD using cumulative volume delta method
cvd = ta.cum(volume * (close - open))  
cvd_sma = ta.sma(cvd, cvd_sma_length)

// Compute momentum of CVD and price
cvd_diff = cvd - ta.sma(cvd, cvd_momentum_length)
price_diff = close - ta.sma(close, price_momentum_length)

// Normalize CVD & Price Strength
cvd_strength = math.abs(cvd_diff) / ta.sma(math.abs(cvd_diff), 20)
price_strength = math.abs(price_diff) / ta.sma(math.abs(price_diff), 20)

// Identify Bullish and Bearish Divergences
bullish_divergence = cvd_diff > 0 and price_diff < 0  
bearish_divergence = cvd_diff < 0 and price_diff > 0  

// Define Strength Levels (lowered threshold for testing)
strong_bullish = bullish_divergence and cvd_strength > 1.2 and price_strength > 1.2
medium_bullish = bullish_divergence and cvd_strength > 1 and price_strength > 1
weak_bullish = bullish_divergence and cvd_strength < 1 and price_strength < 1

strong_bearish = bearish_divergence and cvd_strength > 1.2 and price_strength > 1.2
medium_bearish = bearish_divergence and cvd_strength > 1 and price_strength > 1
weak_bearish = bearish_divergence and cvd_strength < 1 and price_strength < 1

// Track Signal Performance
var float last_signal_price = na
var string last_signal_type = na
var int total_signals = 0
var int successful_signals = 0
var float last_success_check_price = na

// Function to check if signal was successful (modified to check next bar)
is_signal_successful() =>
    if (not na(last_signal_price) and not na(last_signal_type))
        if last_success_check_price != close  // Only check once per new bar
            last_success_check_price := close
            if (last_signal_type == "Bullish")
                close > last_signal_price
            else
                close < last_signal_price
    false

// Update success tracking
if (not na(last_signal_price) and not na(last_signal_type))
    if (is_signal_successful())
        successful_signals := successful_signals + 1

// Calculate success rate
success_rate = total_signals > 0 ? (successful_signals / total_signals) * 100 : 0

// âœ… Log Signals with Performance Tracking
var table signal_table = table.new(position.top_right, 10, 7)

// Debug info
var label debug_label = na
label.delete(debug_label)
debug_label := label.new(
    x=bar_index, 
    y=low, 
    text="CVD Strength: " + str.tostring(math.round(cvd_strength, 2)) + 
         "\nPrice Strength: " + str.tostring(math.round(price_strength, 2)) +
         "\nBullish: " + str.tostring(bullish_divergence) +
         "\nBearish: " + str.tostring(bearish_divergence),
    color=color.new(color.blue, 80))

if bar_index % 5 == 0 // Log every 5 bars to avoid clutter
    table.cell(signal_table, 0, 0, "Timestamp")
    table.cell(signal_table, 1, 0, "Price")
    table.cell(signal_table, 2, 0, "Divergence")
    table.cell(signal_table, 3, 0, "Strength")
    table.cell(signal_table, 4, 0, "Next Bar Result")
    table.cell(signal_table, 5, 0, "Success Rate")
    table.cell(signal_table, 6, 0, "Debug")

    if strong_bullish or strong_bearish
        signal_type = strong_bullish ? "Bullish" : "Bearish"
        last_signal_price := close
        last_signal_type := signal_type
        total_signals := total_signals + 1
        
        table.cell(signal_table, 0, 1, str.tostring(time))
        table.cell(signal_table, 1, 1, str.tostring(close))
        table.cell(signal_table, 2, 1, signal_type)
        table.cell(signal_table, 3, 1, "Strong")
        table.cell(signal_table, 4, 1, "Pending")
        table.cell(signal_table, 5, 1, str.tostring(math.round(success_rate, 2)) + "%")
        table.cell(signal_table, 6, 1, "CVD: " + str.tostring(math.round(cvd_strength, 2)))

// Plot signals on chart
plotshape(series=strong_bullish, title="Strong Bullish", location=location.belowbar, color=color.green, size=size.normal, style=shape.triangleup)
plotshape(series=strong_bearish, title="Strong Bearish", location=location.abovebar, color=color.red, size=size.normal, style=shape.triangledown)

// Plot success rate on chart
var label success_label = na
label.delete(success_label)
success_label := label.new(
    x=bar_index, 
    y=high, 
    text="Success Rate: " + str.tostring(math.round(success_rate, 2)) + "%\nTotal Signals: " + str.tostring(total_signals), 
    color=color.new(color.blue, 80)
)