//@version=6
//More Reliable More Winning Scrore on SOL, Give More Signals
//We can mark as 1st as compare to others
//Enhanced version with profit tracking and performance metrics

indicator("CVD Divergences R-Multiple Backtest Enhanced", overlay=true)

// Strategy Parameters
var float initial_capital = 10000.0
var float position_pct = 100.0

// Define SMA Periods
cvd_sma_length = 50
cvd_momentum_length = 20

// Risk-Reward Parameters
risk_multiple = input.float(1.0, "Risk Multiple (%)", minval=0.1, step=0.1)
reward_multiple = input.float(2.0, "Reward Multiple (%)", minval=0.1, step=0.1)
max_bars = input.int(20, "Maximum Bars to Hold", minval=1)

// Compute CVD using cumulative volume delta method
cvd = ta.cum(volume * (close - open))  
cvd_sma = ta.sma(cvd, cvd_sma_length)

// Compute momentum of CVD and price
cvd_diff = cvd - ta.sma(cvd, cvd_momentum_length)
price_diff = close - ta.sma(close, cvd_momentum_length)

// Identify Divergences
bullish_divergence = cvd_diff > 0 and price_diff < 0  
bearish_divergence = cvd_diff < 0 and price_diff > 0  

// Performance Tracking
var int bullish_total = 0
var int bullish_success = 0
var int bullish_failed = 0
var int bearish_total = 0
var int bearish_success = 0
var int bearish_failed = 0
var int timeout_count = 0

// Balance Tracking
var float current_balance = initial_capital
var float peak_balance = initial_capital
var float max_drawdown = 0.0
var float total_profit_pct = 0.0
var float total_loss_pct = 0.0
var float largest_win = 0.0
var float largest_loss = 0.0
var float current_streak = 0
var float best_streak = 0
var float worst_streak = 0

// Trade Tracking
var float entry_price = na
var string current_trade = na
var int bars_since_signal = 0

// Function to check R-multiple targets and calculate profit
check_targets(trade_type, entry_price, current_high, current_low) =>
    if trade_type == "Bullish"
        profit_target = entry_price * (1 + reward_multiple/100)
        stop_loss = entry_price * (1 - risk_multiple/100)
        if current_high >= profit_target
            [1, ((profit_target - entry_price) / entry_price) * 100]  // Success - Hit 2R
        else if current_low <= stop_loss
            [-1, ((stop_loss - entry_price) / entry_price) * 100] // Failed - Hit Stop Loss
        else
            [0, 0]  // Pending
    else
        profit_target = entry_price * (1 - reward_multiple/100)
        stop_loss = entry_price * (1 + risk_multiple/100)
        if current_low <= profit_target
            [1, ((entry_price - profit_target) / entry_price) * 100]  // Success - Hit 2R
        else if current_high >= stop_loss
            [-1, ((entry_price - stop_loss) / entry_price) * 100] // Failed - Hit Stop Loss
        else
            [0, 0]  // Pending

// Track new signals
if bullish_divergence and na(current_trade)
    bullish_total := bullish_total + 1
    entry_price := close
    current_trade := "Bullish"
    bars_since_signal := 0

if bearish_divergence and na(current_trade)
    bearish_total := bearish_total + 1
    entry_price := close
    current_trade := "Bearish"
    bars_since_signal := 0

// Update existing trade status
if not na(current_trade)
    bars_since_signal := bars_since_signal + 1
    [result, profit_pct] = check_targets(current_trade, entry_price, high, low)
    
    if result != 0 or bars_since_signal > max_bars
        if current_trade == "Bullish"
            if result == 1
                bullish_success := bullish_success + 1
                total_profit_pct := total_profit_pct + profit_pct
                largest_win := math.max(largest_win, profit_pct)
                current_streak := current_streak + 1
                best_streak := math.max(best_streak, current_streak)
                worst_streak := 0
            else if result == -1
                bullish_failed := bullish_failed + 1
                total_loss_pct := total_loss_pct + math.abs(profit_pct)
                largest_loss := math.min(largest_loss, profit_pct)
                current_streak := current_streak - 1
                worst_streak := math.min(worst_streak, current_streak)
                best_streak := 0
            else
                timeout_count := timeout_count + 1
        else
            if result == 1
                bearish_success := bearish_success + 1
                total_profit_pct := total_profit_pct + profit_pct
                largest_win := math.max(largest_win, profit_pct)
                current_streak := current_streak + 1
                best_streak := math.max(best_streak, current_streak)
                worst_streak := 0
            else if result == -1
                bearish_failed := bearish_failed + 1
                total_loss_pct := total_loss_pct + math.abs(profit_pct)
                largest_loss := math.min(largest_loss, profit_pct)
                current_streak := current_streak - 1
                worst_streak := math.min(worst_streak, current_streak)
                best_streak := 0
            else
                timeout_count := timeout_count + 1
        
        // Update balance
        current_balance := current_balance * (1 + profit_pct * position_pct/10000)
        max_drawdown := math.min(max_drawdown, ((current_balance - peak_balance) / peak_balance) * 100)
        peak_balance := math.max(peak_balance, current_balance)
        
        // Reset trade tracking
        current_trade := na
        entry_price := na

// Calculate success rates
bullish_rate = bullish_total > 0 ? (bullish_success / bullish_total) * 100 : 0
bearish_rate = bearish_total > 0 ? (bearish_success / bearish_total) * 100 : 0
overall_rate = (bullish_total + bearish_total) > 0 ? ((bullish_success + bearish_success) / (bullish_total + bearish_total)) * 100 : 0

// Plot signals with R-multiple targets
plotshape(series=bullish_divergence and na(current_trade[1]), title="Bullish", location=location.belowbar, color=color.green, style=shape.triangleup, size=size.small)
plotshape(series=bearish_divergence and na(current_trade[1]), title="Bearish", location=location.abovebar, color=color.red, style=shape.triangledown, size=size.small)

// Display Stats Table
var table stats = table.new(position.top_right, 7, 7, border_width=1)
if barstate.islast
    // R-Multiple Stats
    table.cell(stats, 0, 0, "Signal Type", bgcolor=color.gray)
    table.cell(stats, 1, 0, "Total", bgcolor=color.gray)
    table.cell(stats, 2, 0, "2R Hits", bgcolor=color.gray)
    table.cell(stats, 3, 0, "Stopped", bgcolor=color.gray)
    table.cell(stats, 4, 0, "Timeout", bgcolor=color.gray)
    table.cell(stats, 5, 0, "Win Rate", bgcolor=color.gray)
    table.cell(stats, 6, 0, "R-Mult", bgcolor=color.gray)
    
    // Bullish Stats
    table.cell(stats, 0, 1, "Bullish", bgcolor=color.green)
    table.cell(stats, 1, 1, str.tostring(bullish_total))
    table.cell(stats, 2, 1, str.tostring(bullish_success))
    table.cell(stats, 3, 1, str.tostring(bullish_failed))
    table.cell(stats, 4, 1, str.tostring(bullish_total - bullish_success - bullish_failed))
    table.cell(stats, 5, 1, str.tostring(math.round(bullish_rate, 2)) + "%")
    bull_rmult = bullish_total > 0 ? (bullish_success * reward_multiple - bullish_failed * risk_multiple) / bullish_total : 0
    table.cell(stats, 6, 1, str.tostring(math.round(bull_rmult, 2)))
    
    // Bearish Stats
    table.cell(stats, 0, 2, "Bearish", bgcolor=color.red)
    table.cell(stats, 1, 2, str.tostring(bearish_total))
    table.cell(stats, 2, 2, str.tostring(bearish_success))
    table.cell(stats, 3, 2, str.tostring(bearish_failed))
    table.cell(stats, 4, 2, str.tostring(bearish_total - bearish_success - bearish_failed))
    table.cell(stats, 5, 2, str.tostring(math.round(bearish_rate, 2)) + "%")
    bear_rmult = bearish_total > 0 ? (bearish_success * reward_multiple - bearish_failed * risk_multiple) / bearish_total : 0
    table.cell(stats, 6, 2, str.tostring(math.round(bear_rmult, 2)))
    
    // Overall Stats
    table.cell(stats, 0, 3, "Overall", bgcolor=color.blue)
    table.cell(stats, 1, 3, str.tostring(bullish_total + bearish_total))
    table.cell(stats, 2, 3, str.tostring(bullish_success + bearish_success))
    table.cell(stats, 3, 3, str.tostring(bullish_failed + bearish_failed))
    table.cell(stats, 4, 3, str.tostring(timeout_count))
    table.cell(stats, 5, 3, str.tostring(math.round(overall_rate, 2)) + "%")
    total_rmult = (bullish_total + bearish_total) > 0 ? (bull_rmult * bullish_total + bear_rmult * bearish_total) / (bullish_total + bearish_total) : 0
    table.cell(stats, 6, 3, str.tostring(math.round(total_rmult, 2)))
    
    // Performance Metrics
    table.cell(stats, 0, 4, "Balance", bgcolor=color.new(#FFB300, 90), text_color=color.black)
    table.cell(stats, 1, 4, str.tostring(math.round(current_balance, 2)), bgcolor=color.new(#FFB300, 90), text_color=color.black)
    balance_change = ((current_balance - initial_capital) / initial_capital) * 100
    table.cell(stats, 2, 4, str.tostring(math.round(balance_change, 2)) + "%", bgcolor=color.new(#FFB300, 90), text_color=color.black)
    table.cell(stats, 3, 4, "", bgcolor=color.new(#FFB300, 90), text_color=color.black)
    table.cell(stats, 4, 4, "", bgcolor=color.new(#FFB300, 90), text_color=color.black)
    table.cell(stats, 5, 4, "", bgcolor=color.new(#FFB300, 90), text_color=color.black)
    table.cell(stats, 6, 4, "", bgcolor=color.new(#FFB300, 90), text_color=color.black)
    
    // Drawdown Info
    table.cell(stats, 0, 5, "Max Drawdown", bgcolor=color.new(#FF1744, 90), text_color=color.black)
    table.cell(stats, 1, 5, str.tostring(math.round(math.abs(max_drawdown), 2)) + "%", bgcolor=color.new(#FF1744, 90), text_color=color.black)
    table.cell(stats, 2, 5, "", bgcolor=color.new(#FF1744, 90), text_color=color.black)
    table.cell(stats, 3, 5, "", bgcolor=color.new(#FF1744, 90), text_color=color.black)
    table.cell(stats, 4, 5, "", bgcolor=color.new(#FF1744, 90), text_color=color.black)
    table.cell(stats, 5, 5, "", bgcolor=color.new(#FF1744, 90), text_color=color.black)
    table.cell(stats, 6, 5, "", bgcolor=color.new(#FF1744, 90), text_color=color.black)
    
    // Profit/Loss Info
    table.cell(stats, 0, 6, "P/L Stats", bgcolor=color.new(#00C853, 90), text_color=color.black)
    table.cell(stats, 1, 6, "Win: " + str.tostring(math.round(largest_win, 2)) + "%", bgcolor=color.new(#00C853, 90), text_color=color.black)
    table.cell(stats, 2, 6, "Loss: " + str.tostring(math.round(math.abs(largest_loss), 2)) + "%", bgcolor=color.new(#00C853, 90), text_color=color.black)
    table.cell(stats, 3, 6, "", bgcolor=color.new(#00C853, 90), text_color=color.black)
    table.cell(stats, 4, 6, "", bgcolor=color.new(#00C853, 90), text_color=color.black)
    table.cell(stats, 5, 6, "", bgcolor=color.new(#00C853, 90), text_color=color.black)
    table.cell(stats, 6, 6, "", bgcolor=color.new(#00C853, 90), text_color=color.black)

// Display Settings
var label settings_label = na
label.delete(settings_label)
settings_label := label.new(
    x=bar_index, 
    y=high + (high * 0.02),
    text="Risk: " + str.tostring(risk_multiple) + "% | Reward: " + str.tostring(reward_multiple) + "%\n" +
         "Max Bars: " + str.tostring(max_bars) + "\n" +
         "Success = Hit " + str.tostring(reward_multiple/risk_multiple) + "R before 1R loss",
    color=color.new(color.blue, 80)) 